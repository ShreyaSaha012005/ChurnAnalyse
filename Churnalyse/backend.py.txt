from flask import Flask, request, jsonify
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
import pickle

app = Flask(__name__)

# Load dataset globally
df = None
model = None
scaler = None

@app.route("/train", methods=["POST"])
def train_model():
    global df, model, scaler
    
    # Load uploaded file
    file = request.files["file"]
    df = pd.read_csv(file)
    
    # Encode categorical features
    cat_cols = ['Geography', 'Gender']
    encoder = LabelEncoder()
    for col in cat_cols:
        df[col] = encoder.fit_transform(df[col])
    
    # Feature Engineering
    df['CreditUtilization'] = df['Balance'] / (df['CreditScore'] + 1)
    df['BalanceToSalaryRatio'] = df['Balance'] / (df['EstimatedSalary'] + 1)
    
    # Prepare Data
    X = df.drop(['Exited', 'RowNumber', 'CustomerId', 'Surname'], axis=1, errors='ignore')
    y = df['Exited']
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    
    # Scale features
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    
    # Train Model
    model_type = request.form.get("model", "RandomForest")
    if model_type == "RandomForest":
        model = RandomForestClassifier(random_state=42)
    else:
        model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
    
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    # Save Model and Scaler
    pickle.dump(model, open("model.pkl", "wb"))
    pickle.dump(scaler, open("scaler.pkl", "wb"))
    
    return jsonify({
        "message": "Model trained successfully",
        "accuracy": accuracy_score(y_test, y_pred),
        "classification_report": classification_report(y_test, y_pred, output_dict=True)
    })

@app.route("/predict", methods=["POST"])
def predict():
    try:
        data = request.json
        model = pickle.load(open("model.pkl", "rb"))
        scaler = pickle.load(open("scaler.pkl", "rb"))
        
        # Convert input to NumPy array
        features = np.array([data["age"], data["credit_score"], data["balance"], data["estimated_salary"]]).reshape(1, -1)
        
        # Scale features
        features_scaled = scaler.transform(features)
        
        # Predict
        prediction = model.predict(features_scaled)[0]
        
        return jsonify({"churn": "Yes" if prediction == 1 else "No"})
    except Exception as e:
        return jsonify({"error": str(e)})

if __name__ == "__main__":
    app.run(debug=True)
